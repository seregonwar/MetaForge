// MetaForge Grammar Definition - Extended

program        ::= (declaration | statement)*

// Declarations
declaration    ::= struct_decl
                | enum_decl
                | function_decl
                | variable_decl
                | import_decl

struct_decl    ::= "struct" identifier "{" (field_decl)* "}"
field_decl     ::= type identifier ";"

enum_decl      ::= "enum" identifier "{" enum_values "}"
enum_values    ::= identifier ("," identifier)*

// Generics
generic_params ::= "<" identifier ("," identifier)* ">"
generic_type   ::= identifier generic_params?

// Pattern Matching
match_expr     ::= "match" expression "{" match_arms "}"
match_arms     ::= match_arm ("," match_arm)*
match_arm      ::= pattern "=>" expression

pattern        ::= literal_pattern
                | struct_pattern
                | identifier
                | "_"

struct_pattern ::= identifier "{" field_patterns "}"
field_patterns ::= field_pattern ("," field_pattern)*
field_pattern  ::= identifier ":" pattern
                | identifier

// Error Handling
try_stmt       ::= "try" block catch_clause
catch_clause   ::= "catch" identifier block

// Advanced Types
array_type     ::= type "[" expression "]"
closure_type   ::= "fn" "(" parameter_list ")" "->" type

// List Comprehension
list_comp      ::= "[" expression "for" identifier "in" expression "]"

// Lambda Expression
lambda_expr    ::= "fn" "(" parameter_list ")" "->" type block

// Range Expression
range_expr     ::= expression ".." expression

// Type Inference
let_stmt       ::= "let" identifier (":" type)? "=" expression ";"

// Existing rules updated...
type          ::= basic_type
                | generic_type
                | array_type
                | closure_type
                | "ptr"

basic_type    ::= "i8" | "i16" | "i32" | "i64" 
                | "u8" | "u16" | "u32" | "u64"
                | "f32" | "f64" | "bool"
                | crypto_type

statement      ::= declaration 
                | assignment
                | function_def
                | function_call
                | control_flow
                | import_statement
                | memory_op
                | expression ";"

// Basic declarations
declaration    ::= type identifier ("=" expression)? ";"
type          ::= "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64" | "ptr"

// Expressions
expression    ::= term (("+"|"-") term)*
term          ::= factor (("*"|"/"|"%") factor)*
factor        ::= number
                | identifier
                | string_literal
                | "(" expression ")"
                | memory_op
                | function_call

// Assignment
assignment    ::= (identifier | deref_expr) "=" expression ";"
deref_expr    ::= "deref" expression

// Import statements
import_statement ::= "import" ("py" | "c" | "cpp") string_literal ";"

// Function definition
function_def   ::= "fn" identifier "(" parameter_list ")" "->" type block
parameter_list ::= (declaration ("," declaration)*)?
block         ::= "{" statement* "}"

// Control flow
control_flow  ::= if_statement
                | while_statement
                | for_statement
                | return_statement

if_statement  ::= "if" expression block ("else" block)?
while_statement ::= "while" expression block
for_statement ::= "for" "(" statement ";" expression ";" statement ")" block
return_statement ::= "ret" expression? ";"

// Memory operations
memory_op     ::= alloc_op
                | free_op
                | deref_op
                | ref_op

alloc_op      ::= "alloc" expression
free_op       ::= "free" expression
deref_op      ::= "deref" expression
ref_op        ::= "ref" identifier


crypto_op     ::= encrypt_op
                | decrypt_op
                | hash_op
                | key_op
                | cipher_op

encrypt_op    ::= "encrypt" expression "using" expression
decrypt_op    ::= "decrypt" expression "using" expression
hash_op       ::= "hash" expression ("with" identifier)?
key_op        ::= "genkey" expression
cipher_op     ::= "cipher" identifier "{" cipher_params "}"

cipher_params ::= "algorithm" ":" identifier ";"
                | "mode" ":" identifier ";"
                | "padding" ":" identifier ";"


crypto_type   ::= "key"
                | "cipher"
                | "hash"
                | "bytes"
                | "stream"


scoped_identifier ::= identifier ("::" identifier)*


function_call    ::= scoped_identifier "(" argument_list? ")"
argument_list    ::= expression ("," expression)*